{"version":3,"sources":["components/common/Navbar.jsx","App.js","serviceWorker.js","index.js","utils/utils.js"],"names":["Navbar","navClass","isDesktop","Navs","id","text","className","path","out","src","alt","map","nav","classes","linkDisabled","key","href","exact","to","PoolsContainer","React","lazy","NewPoolsContainer","SecurityMobile","SwapContainer","NotFound","App","fallback","component","from","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","isMobile","test","userAgent","orientation","indexOf","getStayledNumber","number","space","strNumber","toString","indexDot","substring","concat"],"mappings":"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","file":"static/js/main.d4634733.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { isDesktop } from '../../utils/utils'\nimport '../../styles/scss/navbar.css';\n\nconst Navbar = () => {\n\n\n\n\n    const navClass = isDesktop() ? \"right\" : \"nav-mobile\"\n\n    let Navs = [{ id: \"pools\", text: <span className=\"deus-sw\" > <span className=\"swap\">Staking</span></span>, path: \"/staking\" }, { id: \"exchange\", text: <span className=\"deus-sw\" > <span className=\"swap\">Swap</span></span>, path: \"/swap\" }, { id: \"home\", text: \"Home\", path: \"https://deus.finance\", out: true },]\n    // let Navs = [{ id: \"pools\", text: \"LP-Pools\", path: \"/pools\" }, { id: \"home\", text: \"Home\", path: \"/home\" },]\n    if (!isDesktop()) {\n        Navs = [{ id: \"exchange\", text: <span className=\"deus-sw\" > <span className=\"swap\">Swap</span></span>, path: \"/swap\" }, { id: \"home\", text: \"Home\", path: \"https://deus.finance\", out: true },]\n    }\n    //DEUS staking\n    return (<nav>\n        {isDesktop() && <div className=\"left\">\n            <ul className=\"left-ul\">\n                <li>\n                    <div className=\"logo\">\n                        <img className=\"vertical-center\" src=\"img/favicon/60x60.png\" alt=\"deusfinance\" />\n                    </div>\n                </li>\n                <li><span className=\"deus\" >DEUS <span className=\"finance\">finance</span></span></li>\n                {/* <li className=\"deus \" ><div style={{ padding: \"10px 2px\" }}>DEUS</div></li>\n                <li className=\"finance\">finance</li> */}\n            </ul>\n\n        </div>}\n        <div className={navClass}>\n            <ul>\n                {\n                    Navs.map(nav => {\n                        const classes = nav.linkDisabled ? \"disabled-link\" : \"\"\n                        if (nav.out) return <li key={nav.id}><a className={classes} href={nav.path}> {nav.text} </a></li>\n\n                        return <li key={nav.id}><NavLink className={classes} exact={true} to={nav.path}> {nav.text} </NavLink></li>\n                    })\n                }\n            </ul>\n        </div>\n    </nav >);\n}\n\nexport default Navbar;","import React, { Suspense } from 'react';\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n// import Home from './components/Home';\n// import NotFound from './components/NotFound';\n// import PoolsContainer from './components/Pools/PoolsContainer';\n// import SwapContainer from './components/Swap/SwapContainer';\n// import SecurityMobile from './components/SecurityMobile';\nimport Navbar from './components/common/Navbar';\nimport { isDesktop } from './utils/utils';\nimport './styles/scss/style.css';\nimport { LoopCircleLoading } from 'react-loadingg';\n\n\nconst PoolsContainer = React.lazy(() => import('./components/Pools/PoolsContainer'));\nconst NewPoolsContainer = React.lazy(() => import('./components/Pools/NewPoolsContainer'));\nconst SecurityMobile = React.lazy(() => import('./components/SecurityMobile'));\nconst SwapContainer = React.lazy(() => import('./components/Swap/SwapContainer'));\nconst NotFound = React.lazy(() => import('./components/NotFound'));\n\n\nfunction App() {\n\n  return (<>\n    <Navbar />\n    <Suspense fallback={<LoopCircleLoading></LoopCircleLoading>}>\n      <Switch>\n        <Route exact path=\"/pools\" component={isDesktop() ? PoolsContainer : SecurityMobile} />\n        <Route exact path=\"/staking\" component={isDesktop() ? NewPoolsContainer : SecurityMobile} />\n        <Route exact path=\"/swap\" component={SwapContainer} />\n        <Route path=\"/not-found\" component={NotFound} />\n        <Redirect exact from=\"/\" to=\"/staking\" />\n        <Redirect to=\"not-found\" />\n      </Switch>\n    </Suspense>\n\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();","export const isDesktop = () => {\n    var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    return ((typeof window.orientation === \"undefined\") || (navigator.userAgent.indexOf('IEMobile') === -1)) && !(isMobile);\n};\n\n\nexport const getStayledNumber = (number, space = 9) => {\n    const strNumber = number.toString()\n    const indexDot = strNumber.indexOf(\".\")\n    if (indexDot === -1) return strNumber\n    if (indexDot > space - 2) return strNumber.substring(0, indexDot)\n    return strNumber.substring(0, indexDot).concat(strNumber.substring(indexDot, space))\n}\n"],"sourceRoot":""}