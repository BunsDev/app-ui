{"version":3,"sources":["components/Pools/NewPoolsContainer.jsx"],"names":["NewPoolsContainer","props","state","isMigPopup","isConnected","showPopup","staking","name","amount","contract","coin_name","isApprove","showApprove","wallet","address","markets","dea_price","market_cap","total_locked","fully_duilted","stakes","dea_usdc","amounts","dea","newdea","apy","lp","pool","currLp","allowances","stakingLink","liqLink","rewardRatio","deus_eth","deus","isDeusLink","deus_dea","comming_soon","handleResize","handleScroller","width","window","innerWidth","scrollRef","current","scrollLeft","handleStakeState","setState","SwapState","notify","toast","info","position","POSITION","BOTTOM_RIGHT","success","handlePopup","getTokenAllAmounts","warn","initial","console","log","stakedToken","dontCheckThisToken","token","stakeService","then","getStayledNumber","parseFloat","config","getMarketAmounts","a","fetch","resp","json","jresp","apys","marketsResp","market","apyKey","toFixed","key","handleUpdateDEA","setInterval","tokenName","handleStake","handleApprove","handleClaim","isMigToken","handleWithdraw","handleLP","pair","ethereum","selectedAddress","isMetaMask","isMetamask","setStakingAmount","value","handleConnectWallet","rep","showAddress","substring","length","handleMaxLP","bool","handleMigPupop","React","createRef","document","title","setTimeout","this","addEventListener","removeEventListener","poolsLink","to","className","orders","tokens","shadows","classes","Component"],"mappings":"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","file":"static/js/8.e37222a5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport * as stakeService from '../../services/StakingService'\nimport { getStayledNumber } from '../../utils/utils'\nimport { ToastContainer, toast } from 'react-toastify';\nimport * as config from '../../config';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../styles/scss/pools.css';\nimport StartPool from './StartPool';\nimport Pools from './Pools';\nimport StakePopup from './StakePopup';\nimport Footer from '../common/Footer';\nimport MigrationPopup from './MigrationPopup';\nimport { Link } from 'react-router-dom';\n\n\nclass NewPoolsContainer extends Component {\n    state = {\n        isMigPopup: false,\n        isConnected: false,\n        showPopup: false,\n        staking: {\n            name: \"\",\n            amount: \"\",\n            contract: \"\",\n            coin_name: \"\",\n            isApprove: true,\n            showApprove: true,\n        },\n        wallet: {\n            address: null,\n        },\n        markets: {\n            dea_price: \"\",\n            market_cap: \"\",\n            total_locked: \"\",\n            fully_duilted: \"\",\n        },\n        stakes: {\n            dea_usdc: {\n                name: \"dea_usdc\",\n                amounts: {\n                    dea: 0,\n                    newdea: 0,\n                    apy: 0,\n                    lp: 0,\n                    pool: 0,\n                    currLp: 0,\n                    allowances: 0,\n                },\n                coin_name: \"UNI-V2-DEA-USDC\",\n                stakingLink: \"0x2e3394d3CdcbaAF2bb85Fe9aB4c79CeF4d28b216\",\n                liqLink: \"https://app.uniswap.org/#/add/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/0x80aB141F324C3d6F2b18b030f1C4E95d4d658778\",\n                rewardRatio: 0,\n            },\n\n            deus_eth: {\n                name: \"deus_eth\",\n                amounts: {\n                    dea: 0,\n                    newdea: 0,\n                    apy: 0,\n                    lp: 0,\n                    pool: 0,\n                    currLp: 0,\n                    allowances: 0,\n                },\n                coin_name: \"UNI-V2-DEUS/ETH\",\n                stakingLink: \"0x19945547eC934bBD8C48fA69bC78152C468CCA7a\",\n                liqLink: \"https://app.uniswap.org/#/add/ETH/0x3b62F3820e0B035cc4aD602dECe6d796BC325325\",\n                rewardRatio: 0,\n            },\n\n            deus: {\n                name: \"deus\",\n                amounts: {\n                    dea: 0,\n                    newdea: 0,\n                    apy: 0,\n                    lp: 0,\n                    pool: 0,\n                    currLp: 0,\n                    allowances: 0,\n                },\n                isDeusLink: true,\n                coin_name: \"DEUS\",\n                stakingLink: \"0x15Cd5DDB1ca1A2B87B17e4fc728d904A5B43D246\",\n                liqLink: \"/swap\",\n                rewardRatio: 0,\n            },\n\n            deus_dea: {\n                name: \"deus_dea\",\n                amounts: {\n                    dea: 0,\n                    newdea: 0,\n                    apy: 0,\n                    lp: 0,\n                    pool: 0,\n                    currLp: 0,\n                    allowances: 0,\n                },\n                coin_name: \"UNI-V2-DEUS/DEA\",\n                stakingLink: \"0xef753f6da67b765ded917c2273ce07445e86c8d2\",\n                liqLink: \"https://app.uniswap.org/#/add/0x3b62F3820e0B035cc4aD602dECe6d796BC325325/0x80aB141F324C3d6F2b18b030f1C4E95d4d658778\",\n                rewardRatio: 0,\n            },\n            dea: {\n                name: \"dea\",\n                amounts: {\n                    dea: 0,\n                    newdea: 0,\n                    apy: 0,\n                    lp: 0,\n                    pool: 0,\n                    currLp: 0,\n                    allowances: 0,\n                },\n                comming_soon: true,\n                coin_name: \"\",\n                stakingLink: \"0x1B043BbB372452d71503E6603Dd33b93271Bfec0\",\n                liqLink: \"https://app.uniswap.org/#/swap?outputCurrency=0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f\",\n                rewardRatio: 0,\n            },\n            // uni: {\n            //     name: \"uni\",\n            //     amounts: {\n            //         dea: 0,\n            //         newdea: 0,\n            //         apy: 0,\n            //         lp: 0,\n            //         pool: 0,\n            //         currLp: 0,\n            //         allowances: 0,\n            //     },\n            //     coin_name: \"UNI\",\n            //     stakingLink: \"0x8cd408279e966b7e7e1f0b9e5ed8191959d11a19\",\n            //     liqLink: \"https://app.uniswap.org/#/swap?outputCurrency=0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n            //     rewardRatio: 0,\n            // },\n        },\n    }\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.scrollRef = React.createRef();\n    }\n\n    componentDidMount() {\n        document.title = 'DEUS staking';\n        setTimeout(() => this.isConnected(), 1000);\n        setTimeout(() => this.handleScroller(), 100);\n        this.handleUpdateDEA()\n        this.getMarketAmounts()\n        setInterval(() => this.getMarketAmounts(), 40000)\n        window.addEventListener('resize', this.handleResize)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize)\n    }\n\n    handleResize = () => this.handleScroller()\n\n    handleScroller = () => {\n        const width = (2300 - window.innerWidth) / 2\n        if (this.scrollRef.current) {\n            this.scrollRef.current.scrollLeft = width\n        }\n    }\n\n\n    handleStakeState = (state) => {\n        if (state === \"receipt\" || state === \"error\") {\n            this.setState({ SwapState: null })\n            this.notify(state)\n            return\n        }\n        this.notify(state)\n    }\n\n    notify = (state) => {\n        const { staking } = this.state\n\n        switch (state) {\n            case \"waiting\": {\n                toast.info(\"Waiting for Metamask confirmation.\", {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                });\n                break\n            }\n            case \"transactionHash\": {\n                toast.info(\"Transaction broadcasted.\", {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                });\n                break\n            }\n            case \"receipt\": {\n                toast.success(\"Transaction Successful.\", {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                });\n                if (staking.isApprove) {\n                    staking.isApprove = false\n                    this.setState({ staking })\n                } else {\n                    this.handlePopup(staking.name, false)\n                }\n                this.getTokenAllAmounts(staking.name)\n                break\n            }\n            case \"connectWallet\": {\n                toast.warn(\"Please Connect Wallet.\", {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                });\n                break\n            }\n            case \"error\": {\n                toast.warn(\"Transaction Failed.\", {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                });\n                break\n            }\n            default: {\n                toast.info(\"Unhandled Event.\", {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                });\n            }\n        }\n    };\n\n    initial = () => {\n        console.log(\"initial called\");\n        const { stakes } = this.state\n        for (const stakedToken in stakes) {\n            this.getTokenAllAmounts(stakedToken)\n        }\n    }\n\n\n    dontCheckThisToken = (token) => {\n        return token.comming_soon || !token\n    }\n\n    getTokenAllAmounts = (stakedToken) => {\n        const { stakes } = this.state\n        const token = stakes[stakedToken]\n        if (this.dontCheckThisToken(token)) return\n        console.log(\"initial called for \\t\" + stakedToken);\n        stakeService.getNumberOfStakedTokens(token.name).then((amount) => {\n            token.amounts.lp = getStayledNumber(amount)\n            this.setState({ stakes })\n\n            stakeService.getTotalStakedToken(token.name).then((amount) => {\n                token.amounts.pool = token.amounts.lp === \"0\" || amount === \"0\" ? 0 : (token.amounts.lp / amount) * 100\n                this.setState({ stakes })\n\n                stakeService.getNumberOfPendingRewardTokens(token.name).then((amount) => {\n                    token.amounts.dea = parseFloat(amount)\n                    token.rewardRatio = token.amounts.pool * config.FixedRatio / 100\n                    // token.amounts.newdea = getStayledNumber(parseFloat(amount) + (config.ClaimableDuration / config.UpdateDuration) * token.rewardRatio * 0.89539)\n                    this.setState({ stakes })\n                })\n            })\n        })\n        stakeService.getUserWalletStakedTokenBalance(token.name).then((amount) => {\n            token.amounts.currLp = getStayledNumber(amount)\n            this.setState({ stakes })\n        })\n        stakeService.getAllowances(token.name).then((amount) => {\n            // console.log(amount);\n            token.amounts.allowances = getStayledNumber(amount)\n            this.setState({ stakes })\n        })\n    }\n\n\n    getMarketAmounts = async () => {\n        console.log(\"getMarketAmounts called\");\n\n        try {\n            const { stakes, markets } = this.state\n            const resp = await fetch(\"https://app.deus.finance/static-api.json\")\n            const jresp = await resp.json()\n            const apys = jresp.apy\n            const marketsResp = jresp.market\n            for (const apyKey in apys) {\n                if (!stakes[apyKey]) continue\n                stakes[apyKey].amounts.apy = parseFloat(apys[apyKey]).toFixed(2)\n            }\n            for (const key in marketsResp) {\n                markets[key] = parseFloat(marketsResp[key])\n            }\n            this.setState({ stakes })\n        } catch (error) {\n            console.log(\" get Market Amounts had some error\", error);\n        }\n    }\n\n\n    handleUpdateDEA = () => setInterval(() => {\n        const { stakes } = this.state\n        for (const tokenName in stakes) {\n            const token = stakes[tokenName]\n            if (this.dontCheckThisToken(token)) return\n            stakeService.getNumberOfPendingRewardTokens(token.name).then((amount) => {\n                token.amounts.dea = parseFloat(amount)\n                // token.amounts.newdea = getStayledNumber(parseFloat(amount) + (config.ClaimableDuration / config.UpdateDuration) * token.rewardRatio * 0.89539)\n                this.setState({ stakes })\n            })\n        }\n    }, (config.ClaimableDuration) * 1000)\n\n\n    handleStake = () => {\n        const { staking } = this.state\n        console.log(staking.amount);\n        stakeService.stake(staking.name, staking.amount, this.handleStakeState)\n    }\n\n    handleApprove = () => {\n        const { staking } = this.state\n        console.log(staking.amount);\n        stakeService.approve(staking.name, staking.amount, this.handleStakeState)\n    }\n\n    handleClaim = (stakedToken) => {\n        stakeService.withdraw(stakedToken, 0, this.handleStakeState)\n        const { staking } = this.state\n        staking.name = stakedToken\n        this.setState({ staking })\n        console.log(\"0 handleClaim clicked\")\n    }\n\n    isMigToken = (stakedToken) => {\n        return stakedToken === \"ampl_eth\" || stakedToken === \"uni\" || stakedToken === \"snx\" ? true : false\n    }\n\n\n    handleWithdraw = (stakedToken, amount) => {\n        console.log(\"withdraw\" + amount);\n        const { staking } = this.state\n        staking.name = stakedToken\n        this.setState({ staking })\n        stakeService.withdraw(stakedToken, amount, this.handleStakeState)\n    }\n\n\n    handleLP = (pair) => {\n        console.log(pair + \" handleLP clicked\");\n    }\n\n\n    isConnected = () => {\n        if (window.ethereum) {\n            if (window.ethereum.selectedAddress) {\n                const { wallet } = this.state\n                wallet.address = window.ethereum.selectedAddress\n                this.setState({ wallet, isConnected: true })\n                this.handleScroller()\n            }\n            if (window.ethereum.isMetaMask) {\n                this.setState({ isMetamask: true })\n            }\n        }\n        this.initial()\n    }\n\n\n    setStakingAmount = (value) => {\n        const { staking } = this.state\n        staking.amount = value\n        this.setState({ staking })\n    }\n\n\n    handleConnectWallet = async () => {\n        try {\n            const rep = await stakeService.connectWallet(() => console.log(\"connected\"))\n            console.log(rep ? \"connected to metamask\" : \"\");\n            this.isConnected()\n        } catch (error) {\n            console.log(\"didnt connect to metamask \\t\" + error);\n        }\n    }\n    showAddress = () => {\n        const { address } = this.state.wallet\n        return address.substring(0, 6) + \"...\" + address.substring(address.length - 4, address.length)\n    }\n\n    handleMaxLP = (amount) => {\n        const { staking } = this.state\n        staking.amount = amount\n        this.setState({ staking })\n    }\n\n    handlePopup = (stakedToken, bool) => {\n        console.log(stakedToken);\n        const { staking } = this.state\n        const token = this.state.stakes[stakedToken]\n        if (bool) {\n            staking.contract = \"\" + token.stakingLink\n            staking.coin_name = token.coin_name\n            this.getTokenAllAmounts(stakedToken)\n            staking.isApprove = token.amounts.allowances > 100000 ? false : true\n            staking.showApprove = token.amounts.allowances > 100000 ? false : true\n            staking.name = stakedToken\n        }\n        staking.amount = \"\"\n        this.setState({ showPopup: bool, staking })\n    }\n\n    handleMigPupop = (bool) => {\n        this.setState({ isMigPopup: bool })\n    }\n\n    render() {\n        const { isConnected, stakes, staking, showPopup, isMigPopup, markets } = this.state\n        const orders = {\n            tokens: [\"deus_dea\", \"deus_eth\", \"dea_usdc\", \"deus\", \"EMPTY\", \"dea\"],\n            // tokens: [\"deus_dea\", \"deus_eth\", \"dea_usdc\", \"deus\", null, \"dea\"],\n            shadows: [\"blue-200-shadow\", \"yellow-400-shadow\", \"blue-200-shadow\", \"yellow-400-shadow\", \"yellow-300-shadow\", \"blue-200-shadow\"],\n        }\n        const poolsLink = <Link to=\"/pools\" className=\"pool-link\" > old pools</Link>\n\n        return (<>\n            <div>\n\n            </div>\n            <MigrationPopup isMigPopup={isMigPopup} handleMigPupop={this.handleMigPupop} />\n            <ToastContainer />\n            <StakePopup\n                showPopup={showPopup}\n                staking={staking}\n                stakes={stakes}\n                handlePopup={this.handlePopup}\n                handleMaxLP={this.handleMaxLP}\n                setStakingAmount={this.setStakingAmount}\n                handleApprove={this.handleApprove}\n                handleStake={this.handleStake}\n            />\n            <StartPool isConnected={isConnected} handleConnectWallet={this.handleConnectWallet} />\n            <Pools\n                markets={markets}\n                stakes={stakes}\n                isConnected={isConnected}\n                scrollRef={this.scrollRef}\n                handleScroller={this.handleScroller}\n                handleConnectWallet={this.handleConnectWallet}\n                showAddress={this.showAddress}\n                handlePopup={this.handlePopup}\n                handleClaim={this.handleClaim}\n                handleLP={this.handleLP}\n                handleWithdraw={this.handleWithdraw}\n                orders={orders}\n                poolsLink={poolsLink}\n\n\n            />\n            <Footer classes=\"social\" />\n        </>);\n    }\n}\n\nexport default NewPoolsContainer;\n"],"sourceRoot":""}