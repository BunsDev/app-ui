{"version":3,"sources":["components/App/MuonSwap/index.jsx","hooks/useTokenBalance.js","components/App/MuonSwap/TokenBox.jsx","components/App/MuonSwap/RateBox.jsx","pages/BakktMigrator/index.jsx","hooks/useBakkt.js","components/App/Currency/index.jsx","hooks/useChain.js","hooks/useDebounce.js","assets/images/empty-token.svg","components/App/Swap/SwapAction.jsx","hooks/useAllowance.js","helper/web3.js"],"names":["InputAmount","styled","input","attrs","type","autocomplete","autocorrect","spellcheck","border","width","fontSize","theme","text1_2","StyleSwapBase","css","bg_muon","border1","mediaWidth","upToLarge","bg7","StyleTitles","SwapArrow","FlexCenter","MainWrapper","div","SwapWrapper","mt","useTokenBalance","tokenAddress","fastUpdate","useState","BigNumber","balance","setBalance","useWeb3React","account","web3","useWeb3","contract","useERC20","useRefresh","fastRefresh","useEffect","a","walletBalance","isAddress","eth","getBalance","methods","balanceOf","call","fetchBalance","Wrapper","height","bg8","borderRadius","TokenInfo","Flex","active","TokenBox","hasMax","title","currency","inputAmount","setInputAmount","setActive","TokensMap","wrongNetwork","setFocusType","price","allocation","onMax","setOnMax","data","address","getFullDisplayBalance","decimals","p","justifyContent","SM","color","opacity","formatBalance3","alignItems","placeholder","min","value","isNaN","onChange","e","currentTarget","isZero","Button","style","borderColor","onClick","isGt","estimation","maxBalance","times","gt","toFixed","ROUND_DOWN","undefined","Currency","verticalAlign","size","LG","ml","mr","symbol","src","RateBox","amountIn","amountOut","state","invert","setInvert","px","XS","parseFloat","amountInBig","amountOutBig","invertRatio","ratio","handleRatio","from","to","handleName","marginLeft","viewBox","fill","xmlns","cx","cy","r","fillOpacity","fillRule","clipRule","d","BakktMigrator","setFastUpdate","isApproved","setIsApproved","isPreApproved","setIsPreApproved","approveLoading","setApproveLoading","chainId","useChain","bakktToken","dBakktToken","swapState","setSwapState","hotIn","setHotIn","setAmountIn","debouncedAmountIn","useDebounce","setAmountOut","allowance","useAllowance","toString","onApprove","useApprove","onMigrate","amount","toCurrency","validChainId","forceUpdate","handleSwap","useCallback","fn","getBakktMigrationContract","migrate","getToWei","SendWithToast","console","log","useMigrate","migratorContract","setRatio","then","fromWei","getRatio","useRatio","get","handleApprove","tx","status","events","Approval","raw","error","XL","fontWeight","my","SwapAction","text","bgColor","validNetworks","loading","StyledLogo","img","CurrencyLogo","logo","DefaultLogo","alt","defaultChains","isChain","indexOf","validChain","setValidChain","delay","hotValue","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","module","exports","errors","WrapActions","ButtonSwap","ButtonSyncActive","grad3","txColor","WrapStep","CycleNumber","text1","Line","validNetwork","showWallets","setShowWallets","checkError","addRPC","NameChainId","toUpperCase","position","right","contractAddress","setAllowance","fetchAllowance","ZERO","ethers","constants","MaxUint256","res","payload","message","hash","send","once","CustomTransaction","TransactionState","LOADING","SUCCESS","FAILED","doSignTypedData","time","dataToSign","Promise","resolve","currentProvider","sendAsync","id","jsonrpc","method","params","result","doPersonalSignTypedData","utils","toHex"],"mappings":"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","file":"static/js/19.5d28e361.chunk.js","sourcesContent":["import styled, { css } from 'styled-components'\nimport { FlexCenter } from '../Container';\n\nexport const InputAmount = styled.input.attrs({\n    type: \"number\",\n    autocomplete: \"off\",\n    autocorrect: \"off\",\n    spellcheck: \"false\"\n})`\n    font-weight: 400;\n    flex: 1 1 auto;\n    border: ${({ border }) => border || \"none\"};\n    outline-style: none;\n    width: ${({ width }) => width || \"0px\"};\n    font-size: ${({ fontSize }) => fontSize || \"25px\"};\n    color: ${({ theme }) => theme.text1_2};\n    background: transparent;\n\n`\n\nexport const StyleSwapBase = css`\n    background: ${({ theme }) => theme.bg_muon};\n    border: 1px solid ${({ theme }) => theme.border1};\n    border-radius: 15px;\n    text-align:center;\n    margin:auto;\n    width:100%;\n    max-width:500px;\n    /* ${({ theme }) => theme.mediaWidth.upToLarge`\n        background: ${({ theme }) => theme.bg7};\n    `} */\n`\n\nexport const StyleTitles = css`\n    font-family:\"Monument Grotesk Semi\";\n   .inner-title{\n        opacity:0.75;\n    }\n`\nexport const SwapArrow = styled(FlexCenter)`\n    display:inline-flex;\n    cursor:pointer;\n    &:hover{\n        filter:brightness(0.8)\n    }\n`\nexport const MainWrapper = styled.div`\n   padding-top: 60px;\n   padding-bottom: 30px;\n   text-align:center;\n   max-width: 95%;\n   margin:auto;\n\n`\nexport const SwapWrapper = styled.div`\n${StyleSwapBase}\nborder-color:#000;\npadding:20px 15px;\nmargin-top:30px;\n`\n\nexport const SmallWrapper = styled(FlexCenter)`\n    ${StyleSwapBase}\n    ${StyleTitles}\n    color: ${({ theme }) => theme.text1_2};\n    justify-content:space-between;\n    height:50px;\n    /* margin-top:${({ mt }) => mt || \"-1px\"}; */\n    margin-top: -1px;\n    padding:0 20px;\n`\n\n\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport useWeb3 from \"./useWeb3\"\nimport { isAddress } from \"@ethersproject/address\"\nimport BigNumber from \"bignumber.js\";\nimport { useERC20 } from './useContract'\nimport useRefresh from './useRefresh';\n\nconst useTokenBalance = (tokenAddress, fastUpdate = null) => {\n    const [balance, setBalance] = useState(new BigNumber(0))\n    const { account } = useWeb3React()\n    const web3 = useWeb3()\n    const contract = useERC20(tokenAddress)\n    const { fastRefresh } = useRefresh()\n    useEffect(() => {\n        const fetchBalance = async () => {\n            let walletBalance = null\n            if (!isAddress(tokenAddress)) {\n                walletBalance = await web3.eth.getBalance(account)\n            } else {\n                walletBalance = await contract.methods.balanceOf(account).call()\n            }\n            setBalance(new BigNumber(walletBalance))\n        }\n\n        if (account && tokenAddress) {\n            fetchBalance()\n        } else {\n            setBalance(\"\")\n        }\n    }, [account, tokenAddress, web3, contract, fastRefresh, fastUpdate])\n\n    return balance\n}\n\n\nexport default useTokenBalance","import BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { Flex, Box, Image } from 'rebass/styled-components';\nimport styled from 'styled-components';\nimport { InputAmount } from '.';\nimport { isGt, isZero } from '../../../constant/number';\nimport { getFullDisplayBalance } from '../../../helper/formatBalance';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport { formatBalance3 } from '../../../utils/utils';\nimport { ButtonMax } from '../Button';\nimport CurrencyLogo from '../Currency';\nimport { Type } from '../Text';\n\nconst Wrapper = styled.div`\n    position: relative;\n    height: ${({ height }) => (height || \"90px\")};\n    width: ${({ width }) => (width || \"100%\")};\n    background: ${({ theme }) => theme.bg8};\n    border: 2px solid #000000;\n    padding:0 15px;\n    border-radius: ${({ borderRadius }) => borderRadius || \"15px\"};\n`\nconst TokenInfo = styled(Flex)`\n    align-items:center;\n    cursor:${({ active }) => active ? \"pointer\" : \"default\"};\n    &:hover{\n        filter:${({ active }) => active && \"brightness(0.8)\"};\n    }\n`\n\nconst TokenBox = ({ hasMax, title, currency, inputAmount = \"\", setInputAmount, type, setActive, TokensMap, wrongNetwork, fastUpdate, setFocusType, price, allocation }) => {\n    const [onMax, setOnMax] = useState(false)\n    const data = useTokenBalance(currency?.address, fastUpdate)\n    const [balance, setBalance] = useState(wrongNetwork ? \"0\" : data)\n\n    useEffect(() => {\n        const getBalance = () => {\n            setBalance(data ? getFullDisplayBalance(data, currency?.decimals) : (TokensMap && TokensMap[currency.address]?.balance) ? TokensMap[currency.address]?.balance : \"0\")\n        }\n\n        if (currency) {\n            getBalance()\n        }\n\n    }, [data, currency, wrongNetwork, TokensMap])\n\n    useEffect(() => {\n        if (inputAmount === balance) {\n            setOnMax(true)\n        } else {\n            setOnMax(false)\n        }\n    }, [inputAmount, balance])\n\n    return (<Wrapper>\n        <Flex\n            p=\"10px 0\"\n            justifyContent={\"space-between\"}\n        >\n            <Box>\n                <Type.SM color=\"#000\" opacity=\"0.5\">\n                    {title || \"From\"}\n                </Type.SM>\n            </Box>\n            <Box>\n                <Type.SM color=\"#000\" opacity=\"0.5\" >\n                    Balance: {formatBalance3(balance)}\n                </Type.SM>\n            </Box>\n        </Flex>\n\n        <Flex\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            mt=\"5px\"\n        >\n            <InputAmount placeholder=\"0.0\" min=\"0\" value={isNaN(inputAmount) ? \"\" : inputAmount} onChange={(e) => {\n                setInputAmount(e.currentTarget.value)\n                setFocusType(type)\n            }} />\n\n            {hasMax && !onMax && !isZero(balance) && <ButtonMax width={\"40px\"}\n                active={true}\n                style={{ color: \"#000000\", borderColor: \"#000000\" }}\n                onClick={() => {\n                    if (!isGt(allocation, 0))\n                        setInputAmount(balance)\n                    else {\n                        let estimation = 1;\n                        if (price !== 1) {\n                            estimation = 0.995\n                        }\n                        const balanceInDollar = new BigNumber(balance).times(price).times(estimation)\n                        const maxBalance = balanceInDollar.gt(allocation) ? new BigNumber(allocation).times(estimation).div(price).toFixed(currency?.decimals, BigNumber.ROUND_DOWN) : balance\n                        setInputAmount(maxBalance)\n                    }\n                }}>\n                MAX\n            </ButtonMax>}\n\n            <TokenInfo onClick={setActive ? () => setActive(true, type) : undefined} active={setActive ? true : false}>\n                <CurrencyLogo\n                    style={{ verticalAlign: \"middle\" }}\n                    currency={currency}\n                    size={\"25px\"}\n                />\n                <Type.LG color=\"text1_2\" ml=\"7px\" mr=\"9px\">{currency?.symbol}</Type.LG>\n                {setActive && <Image src=\"/img/select-black.svg\" size=\"10px\" />}\n            </TokenInfo>\n        </Flex>\n\n\n\n    </Wrapper >);\n}\n\nexport default TokenBox;","import React from 'react';\nimport { Flex } from 'rebass/styled-components';\nimport { FlexCenter } from '../Container';\nimport { Type } from '../Text';\nimport { SwapArrow } from '.';\nimport BigNumber from 'bignumber.js';\n\nconst handleName = (state, invert) => {\n    const { from, to } = state\n    if (invert) return `${to.symbol} per ${from.symbol}`\n    return ` ${from.symbol} per ${to.symbol}`\n}\n\nconst handleRatio = (amountIn, amountOut, invert) => {\n    if (!amountIn || !amountOut || isNaN(amountIn) || isNaN(amountOut)) return \"\"\n    if (parseFloat(amountIn) <= 0 || parseFloat(amountOut) <= 0) return ''\n    const amountInBig = new BigNumber(amountIn)\n    const amountOutBig = new BigNumber(amountOut)\n    if (invert) {\n        const invertRatio = amountOutBig.div(amountInBig, 10).toFixed(6, 0)\n        return `${invertRatio}`\n    }\n    const ratio = amountInBig.div(amountOutBig, 10).toFixed(6, 0)\n    return `${ratio}`\n}\n\nconst RateBox = ({ amountIn, amountOut, state, invert, setInvert }) => {\n    return (\n        <Flex justifyContent=\"space-between\" mt=\"15px\" px=\"10px\">\n            <Type.XS color=\"text1_2\">Price</Type.XS>\n            <FlexCenter>\n                <Type.XS color=\"text1_2\">{handleRatio(amountIn, amountOut, invert)} {handleName(state, invert)}  </Type.XS>\n                <SwapArrow style={{ marginLeft: \"5px\" }} onClick={() => setInvert(!invert)} >\n                    <svg width={15} height={15} viewBox=\"0 0 10 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx={5} cy={5} r={5} fill=\"white\" fillOpacity=\"0.75\" />\n                        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M2.14258 4.60404V4.05876C2.14258 3.29536 2.77119 2.69555 3.57124 2.69555H6.88575L6.22856 2.06847C6.11427 1.95941 6.11427 1.79583 6.22856 1.68677C6.34286 1.57772 6.5143 1.57772 6.62859 1.68677L7.77152 2.77734C7.80009 2.8046 7.82867 2.83187 7.82867 2.85913C7.85724 2.91366 7.85724 2.99545 7.82867 3.07725C7.80009 3.10451 7.80009 3.13177 7.77152 3.15904L6.62859 4.24961C6.57144 4.30413 6.5143 4.3314 6.42858 4.3314C6.34286 4.3314 6.28571 4.30413 6.22856 4.24961C6.11427 4.14055 6.11427 3.97696 6.22856 3.86791L6.88575 3.24083H3.57124C3.0855 3.24083 2.71404 3.59527 2.71404 4.05876V4.60404C2.71404 4.76763 2.59975 4.87668 2.42831 4.87668C2.25687 4.87668 2.14258 4.76763 2.14258 4.60404Z\" fill=\"black\" />\n                        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M7.57215 4.87695C7.40071 4.87695 7.28642 4.98601 7.28642 5.14959V5.69488C7.28642 6.15837 6.91497 6.5128 6.42922 6.5128H3.11473L3.77192 5.88573C3.88621 5.77667 3.88621 5.61309 3.77192 5.50403C3.65762 5.39497 3.48619 5.39497 3.37189 5.50403L2.22897 6.5946C2.20039 6.62186 2.17182 6.64912 2.17182 6.67639C2.14325 6.73092 2.14325 6.81271 2.17182 6.8945C2.20039 6.92177 2.20039 6.94903 2.22897 6.97629L3.37189 8.06686C3.42904 8.12139 3.48619 8.14865 3.57191 8.14865C3.65762 8.14865 3.71477 8.12139 3.77192 8.06686C3.88621 7.95781 3.88621 7.79422 3.77192 7.68516L3.11473 7.05809H6.42922C7.22927 7.05809 7.85788 6.45828 7.85788 5.69488V5.14959C7.85788 4.98601 7.74359 4.87695 7.57215 4.87695Z\" fill=\"black\" />\n                    </svg>\n                </SwapArrow>\n            </FlexCenter>\n        </Flex>\n    );\n}\n\nexport default RateBox;","import React, { useCallback, useEffect, useState } from 'react';\nimport { Image } from 'rebass/styled-components';\nimport { MainWrapper, SwapWrapper, SwapArrow } from '../../components/App/MuonSwap';\nimport TokenBox from '../../components/App/MuonSwap/TokenBox';\nimport SwapAction from '../../components/App/Swap/SwapAction';\nimport RateBox from '../../components/App/MuonSwap/RateBox';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { useApprove } from '../../hooks/useApprove';\nimport { useAllowance } from '../../hooks/useAllowance';\nimport { bakktToken, dBakktToken } from '../../constant/token';\nimport useChain from '../../hooks/useChain';\nimport { useDebounce } from '../../hooks/useDebounce';\nimport { Type } from '../../components/App/Text';\nimport { useMigrate, useRatio } from '../../hooks/useBakkt';\n\nconst BakktMigrator = () => {\n    const [invert, setInvert] = useState(false)\n    const [fastUpdate, setFastUpdate] = useState(0)\n    const [isApproved, setIsApproved] = useState(null)\n    const [isPreApproved, setIsPreApproved] = useState(null)\n    const [approveLoading, setApproveLoading] = useState(false)\n    const { account } = useWeb3React()\n    const validNetworks = [1]\n    const [, setFocusType] = useState(\"from\")\n\n    const chainId = useChain(validNetworks)\n\n    const contractAddress = \"0x702ed7074b2ee71896d386efaf78e1ddc221e34e\"\n\n    const [swapState, setSwapState] = useState({\n        from: bakktToken,\n        to: dBakktToken,\n    })\n\n    const [hotIn, setHotIn] = useState(\"\")\n    const [amountIn, setAmountIn] = useState(\"\")\n    const debouncedAmountIn = useDebounce(amountIn, 500, hotIn);\n    const [amountOut, setAmountOut] = useState(\"\")\n    const allowance = useAllowance(swapState.from, contractAddress, chainId)\n\n    useEffect(() => {\n        if (amountIn === \"\" || debouncedAmountIn === \"\") setAmountOut(\"\")\n    }, [amountIn, debouncedAmountIn]);\n\n    useEffect(() => {\n        setIsPreApproved(null)\n        setIsApproved(null)\n    }, [chainId, account, swapState.from]);\n\n\n    useEffect(() => {\n        if (isPreApproved == null) {\n            if (allowance.toString() === \"-1\") {\n                setIsPreApproved(null) //doNothing\n            } else {\n                if (allowance.gt(0)) {\n                    setIsPreApproved(true)\n                } else {\n                    setIsPreApproved(false)\n                }\n            }\n        } else {\n            if (allowance.gt(0)) {\n                setIsApproved(true)\n            }\n        }\n        //eslint-disable-next-line \n    }, [allowance]) //isPreApproved ?\n\n    const { onApprove } = useApprove(swapState.from, contractAddress, chainId)\n    const { onMigrate } = useMigrate(debouncedAmountIn, amountOut, swapState.from, chainId, fastUpdate)\n    const ratio = useRatio()\n\n    useEffect(() => {\n        const get = async () => {\n            // const amount = await getAmountsOut()\n            // console.log(\"swap \", amount);\n            if (amountIn === \"\") setAmountOut(\"\")\n            else setAmountOut(new BigNumber(ratio).times(debouncedAmountIn))\n        }\n        get()\n        //eslint-disable-next-line\n    }, [debouncedAmountIn])//replace multiple useState variables with useReducer\n\n\n    const handleApprove = useCallback(async () => {\n        try {\n            setApproveLoading(true)\n            const tx = await onApprove()\n            if (tx.status) {\n                setIsApproved(new BigNumber(tx.events.Approval.raw.data, 16).gt(0))\n            } else {\n                console.log(\"Approved Failed\");\n            }\n            setApproveLoading(false)\n\n        } catch (e) {\n            setApproveLoading(false)\n            console.error(e)\n        }\n    }, [onApprove])\n\n\n    const handleSwap = useCallback(async () => {\n        try {\n            const tx = await onMigrate()\n            if (tx.status) {\n                console.log(\"swap did\");\n                setAmountIn(\"\")\n                setFastUpdate(fastUpdate => fastUpdate + 1)\n            } else {\n                console.log(\"Swap Failed\");\n            }\n        } catch (e) {\n            console.error(e)\n        }\n    }, [onMigrate])\n\n\n    return (<>\n\n        <MainWrapper>\n            <Type.XL fontWeight=\"300\">BAKKT Migrator</Type.XL>\n\n            <SwapWrapper>\n                <TokenBox\n                    type=\"from\"\n                    hasMax={true}\n                    inputAmount={amountIn}\n                    setInputAmount={setAmountIn}\n                    setActive={undefined}\n                    currency={swapState.from}\n                    setFocusType={setFocusType}\n                    fastUpdate={fastUpdate}\n                />\n                <SwapArrow onClick={() => {\n                    setAmountIn(amountOut)\n                    setHotIn(amountOut)\n                    setSwapState({ from: swapState.to, to: swapState.from })\n                    setAmountOut(\"\")\n                }}>\n                    <Image src=\"/img/swap/swap-arrow.svg\" size=\"20px\" my=\"15px\" />\n                </SwapArrow>\n\n                <TokenBox\n                    type=\"to\"\n                    title=\"To (estimated)\"\n                    inputAmount={amountOut}\n                    setInputAmount={setAmountOut}\n                    setActive={undefined}\n                    TokensMap={null}\n                    setFocusType={setFocusType}\n                    currency={swapState.to}\n                    fastUpdate={fastUpdate}\n                />\n\n                <RateBox state={swapState} amountIn={debouncedAmountIn} amountOut={amountOut} invert={invert} setInvert={setInvert} />\n\n                <SwapAction\n                    text=\"MIGRATE\"\n                    bgColor=\"bg_blue\"\n                    isPreApproved={isPreApproved}\n                    validNetworks={[1]}\n                    isApproved={isApproved}\n                    loading={approveLoading}\n                    handleApprove={handleApprove}\n                    handleSwap={handleSwap}\n                    TokensMap={null}\n                    swapState={swapState}\n                    amountIn={amountIn}\n                    amountOut={amountOut}\n                />\n\n            </SwapWrapper>\n        </MainWrapper>\n    </>);\n}\n\nexport default BakktMigrator;","import { useWeb3React } from \"@web3-react/core\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { getBakktMigrationContract } from \"../helper/contractHelpers\"\nimport { fromWei, getToWei } from \"../helper/formatBalance\"\nimport { SendWithToast } from \"../helper/web3\"\nimport useWeb3 from \"./useWeb3\"\n\nexport const useMigrate = (amount, amountOut, toCurrency, validChainId = 1, forceUpdate) => {\n    const { account, chainId } = useWeb3React()\n    const web3 = useWeb3()\n\n    const handleSwap = useCallback(async () => {\n        try {\n            if (validChainId && chainId !== validChainId) return false\n            const fn = getBakktMigrationContract(web3).methods.migrate(getToWei(amount).toFixed(), \"0x023466190D8dffF0fae089Cf1a05277E7203f89F\")\n            return await SendWithToast(fn, { from: account }, chainId, `Migrate ${amountOut} ${toCurrency.symbol}`)\n        } catch (e) {\n            console.log(e);\n            return false\n        }\n        // eslint-disable-next-line\n    }, [account, amount, amountOut, chainId, validChainId, web3, forceUpdate])\n\n    return { onMigrate: handleSwap }\n}\n\nexport const useRatio = (migratorContract) => {\n    const [ratio, setRatio] = useState(\"\")\n    const web3 = useWeb3()\n\n    useEffect(() => {\n        const getRatio = async () => {\n            getBakktMigrationContract(web3).methods.ratio().call().then(ratio => {\n                setRatio(fromWei(ratio))\n            })\n        }\n        getRatio()\n    }, [web3])\n\n    return ratio\n}\n\n\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport DefaultLogo from '../../.../../../assets/images/empty-token.svg'\n// import EthereumLogo from '../../.../assets/images/ethereum-logo.svg'\n// import useHttpLocations from '../../hooks/useHttpLocations'\n// import { WrappedTokenInfo } from '../../state/lists/hooks'\n\n// export const getTokenLogoURL = (address) =>\n//     `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`\n\nexport const StyledLogo = styled.img`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  border-radius: ${({ size }) => size};\n  background-color:${({ bgColor }) => bgColor && bgColor};\n`\n\n\n// const StyledLogo = styled(StyledDefaultLogo)`\n//   background-color: ${({ theme }) => theme.white};\n// `\n\nexport default function CurrencyLogo({\n  currency,\n  bgColor,\n  size = '24px',\n  style\n}) {\n  // const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  // const srcs = useMemo(() => {\n  //     if (currency === ETHER) return []\n\n  //     if (currency instanceof Token) {\n  //         if (currency instanceof WrappedTokenInfo) {\n  //             return [...uriLocations, getTokenLogoURL(currency.address)]\n  //         }\n  //         return [getTokenLogoURL(currency.address)]\n  //     }\n  //     return []\n  // }, [currency, uriLocations])\n\n  // if (currency === ETHER) {\n  //     return <StyledEthereumLogo src={EthereumLogo} size={size} style={style} />\n  // }\n\n  return <StyledLogo size={size} src={currency?.logo || DefaultLogo} bgColor={bgColor} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\n}","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useChain = (defaultChains = []) => {\n    const { chainId } = useWeb3React()\n    const isChain = defaultChains.indexOf(chainId) !== -1\n    const [validChain, setValidChain] = useState(isChain ? chainId : defaultChains[0])\n    useEffect(() => {\n        if (!chainId) setValidChain(defaultChains[0])\n        else {\n            if (defaultChains.indexOf(chainId) !== -1) {\n                setValidChain(chainId)\n            } else {\n                setValidChain(defaultChains[0])\n            }\n        }\n    }, [chainId, defaultChains])\n\n    return validChain\n}\n\nexport default useChain","import { useEffect, useState } from \"react\";\n\nexport function useDebounce(value, delay, hotValue) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                if (value === \"\") setDebouncedValue(\"\")\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    useEffect(\n        () => {\n            setDebouncedValue(hotValue);\n        },\n        [hotValue])\n\n    return debouncedValue;\n}","module.exports = __webpack_public_path__ + \"static/media/empty-token.0bf5d0c2.svg\";","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components'\nimport { ButtonSyncDeactivated, ButtonSyncActive } from '../Button';\nimport { FlexCenter } from '../Container';\nimport { WaveLoading } from 'react-loadingg';\nimport { useWeb3React } from '@web3-react/core';\nimport { isGt, isZero } from '../../../constant/number';\nimport Wallets from '../../common/Navbar/Wallets';\nimport { addRPC } from '../../../services/addRPC';\nimport { NameChainId } from '../../../constant/web3';\n\n\nconst errors = {\n    NotConnected: \"CONNECT WALLET\",\n    SWITCH: \"SWITCH TO\",\n    EMPTY: \"ENTER AN AMOUNT\",\n    INSUFFICIENT: \"INSUFFICIENT BALANCE\",\n    LOADING: \"LOADING...\",\n}\n\nconst WrapActions = styled.div`\n    margin-top:33px;\n    height: \"55px\";\n    display:flex;\n    font-size:20px;\n    font-family:\"Monument Grotesk Semi\";\n    & > button {\n        margin:0px 5px;\n    }\n`\nconst ButtonSwap = styled(ButtonSyncActive)`\n    background: ${({ theme, bgColor }) => bgColor ? theme[bgColor] : theme.grad3};\n    color: ${({ theme, txColor }) => txColor ? theme[txColor] : theme.text1_2};\n    font-size:${({ fontSize }) => fontSize || \"20px\"};\n`\n\nconst WrapStep = styled(FlexCenter)`\n    margin-top:10px;\n`\n\nconst CycleNumber = styled(FlexCenter)`\n    width:20px;\n    height:20px;\n    border-radius:20px;\n    font-weight:400;\n    background: ${({ theme, bgColor, active }) => active ? bgColor ? theme[bgColor] : theme.grad3 : theme.border1};\n    color: ${({ theme, active, txColor }) => active ? txColor ? theme[txColor] : theme.text1_2 : theme.text1};\n    z-index: 0;\n    font-size:12px;\n    margin:0 -1px;\n`\nconst Line = styled.div`\n    background: ${({ theme, bgColor }) => bgColor ? theme[bgColor] : theme.grad3} ;\n    height: 2px;\n    width: 50%;\n`\nconst SwapAction = ({ text = \"SWAP\", isPreApproved, amountIn, amountOut, swapState, TokensMap, isApproved, loading, validNetwork, handleApprove, handleSwap, bgColor, txColor }) => {\n\n    const { account, chainId } = useWeb3React()\n    const [showWallets, setShowWallets] = useState(false)\n\n    const checkError = () => {\n        if (amountIn === \"\" || isZero(amountIn)) return errors.EMPTY\n        if (TokensMap && isGt(amountIn, TokensMap[swapState.from.address]?.balance)) return errors.INSUFFICIENT\n        if (isNaN(amountOut)) return errors.LOADING\n        return null;\n    }\n\n    useEffect(() => {\n        if (account)\n            setShowWallets(false)\n    }, [account])\n\n    if (!account) {\n        return <WrapActions>\n            <Wallets showWallets={showWallets} setShowWallets={setShowWallets} />\n            <ButtonSwap txColor={txColor} bgColor={bgColor} active={true} onClick={() => setShowWallets(true)}>\n                CONNECT WALLET\n            </ButtonSwap>\n        </WrapActions>\n    }\n\n    if (chainId && chainId !== validNetwork) {\n        return <WrapActions>\n            <Wallets showWallets={showWallets} setShowWallets={setShowWallets} />\n            <ButtonSwap txColor={txColor} bgColor={bgColor} active={true} onClick={() => addRPC(account, validNetwork)}>\n                SWITCH TO {NameChainId[validNetwork].toUpperCase()}\n            </ButtonSwap>\n        </WrapActions>\n    }\n\n\n    if (checkError()) {\n        return <WrapActions>\n            <ButtonSyncDeactivated >{checkError()}</ButtonSyncDeactivated>\n        </WrapActions>\n    }\n\n    if (isPreApproved == null) {\n        return <WrapActions>\n            <ButtonSyncDeactivated>\n                <WaveLoading />\n            </ButtonSyncDeactivated>\n        </WrapActions>\n    }\n\n    return (<>\n        {isPreApproved ?\n            <WrapActions>\n                <ButtonSwap active={true} fontSize={\"25px\"} onClick={handleSwap} txColor={txColor} bgColor={bgColor}>{text}</ButtonSwap>\n            </WrapActions> : <>\n                <WrapActions>\n                    {!isApproved ? <>\n                        <ButtonSwap txColor={txColor} bgColor={bgColor} active={true} onClick={handleApprove} >\n                            APPROVE\n                            {loading && <img style={{ position: \"absolute\", right: \"10px\" }} alt=\"sp\" src=\"/img/spinner.svg\" width=\"35\" height=\"35\" />}\n                        </ButtonSwap>\n                        <ButtonSyncDeactivated> {text}</ButtonSyncDeactivated>\n                    </> : <>\n                        <ButtonSyncDeactivated>APPROVED</ButtonSyncDeactivated>\n                        <ButtonSwap txColor={txColor} bgColor={bgColor} active={true} onClick={handleSwap}>\n                            {text}\n                        </ButtonSwap>\n                    </>\n                    }\n                </WrapActions>\n                <WrapStep bgColor={bgColor}>\n                    <CycleNumber bgColor={bgColor} active={true}>1</CycleNumber>\n                    <Line bgColor={bgColor}></Line>\n                    <CycleNumber bgColor={bgColor} active={isApproved}>2</CycleNumber>\n                </WrapStep>\n            </>\n        }\n    </>);\n}\n\nexport default SwapAction;","import { useWeb3React } from \"@web3-react/core\"\nimport { useEffect, useState } from \"react\"\nimport BigNumber from \"bignumber.js\";\nimport useRefresh from \"./useRefresh\";\nimport { useERC20 } from './useContract'\nimport { ethers } from \"ethers\";\nimport { ZERO } from \"../constant/number\";\n\n\nexport const useAllowance = (currency, contractAddress, validChainId) => {\n    const [allowance, setAllowance] = useState(new BigNumber(-1))\n    const { account, chainId } = useWeb3React()\n    const { fastRefresh } = useRefresh()\n    const { address: tokenAddress } = currency\n    const contract = useERC20(tokenAddress)\n\n    useEffect(() => {\n        const fetchAllowance = async () => {\n            if (!tokenAddress) return setAllowance(ZERO)\n            if (validChainId && chainId !== validChainId && validChainId !== currency.chainId) setAllowance(ZERO)\n            if (contract === null) setAllowance(ethers.constants.MaxUint256)\n            else if (currency.allowance) { setAllowance(currency.allowance) }\n            else {\n                try {\n                    const res = await contract.methods.allowance(account, contractAddress).call()\n                    setAllowance(new BigNumber(res))\n                } catch (error) {\n                    console.log(\"error useAllowance\",error);\n                }\n            }\n        }\n        if (account && tokenAddress) {\n            setAllowance(new BigNumber(-1))\n            fetchAllowance()\n        }\n    }, [account, contract, chainId, contractAddress, tokenAddress, validChainId, currency, fastRefresh])\n\n    return allowance\n}\n\n","import { TransactionState } from \"../utils/constant\"\nimport { CustomTransaction, SwapTransaction } from \"../utils/explorers\"\n\nexport const SendWithToast = (fn, payload = {}, chainId, message) => {\n    if (!fn) return\n    let hash = null\n    return fn\n        .send({ ...payload })\n        .once('transactionHash', (tx) => {\n            hash = tx\n            CustomTransaction(TransactionState.LOADING, {\n                hash,\n                chainId: chainId,\n                message: message,\n            })\n        })\n        .once('receipt', () => CustomTransaction(TransactionState.SUCCESS, {\n            hash,\n            chainId: chainId,\n            message: message,\n        }))\n        .once('error', () => CustomTransaction(TransactionState.FAILED, {\n            hash,\n            chainId: chainId,\n            message: message,\n        }))\n}\n\n//WRITE FUNCTIONS\nexport const SwapWithToast = (fn, payload = {}) => {\n    if (!fn) return\n    const { params, from, to, chainId } = payload\n    let hash = null\n    return fn\n        .send({ ...params })\n        .once('transactionHash', (tx) => {\n            hash = tx\n            SwapTransaction(TransactionState.LOADING, { hash, chainId, from, to })\n        })\n        .once('receipt', () => SwapTransaction(TransactionState.SUCCESS, { hash, chainId, from, to }))\n        .once('error', () => SwapTransaction(TransactionState.FAILED, { hash, chainId, from, to }))\n}\n\n\nexport function doSignTypedData(time, dataToSign, account, web3) {\n    return new Promise(resolve => {\n        web3.currentProvider.sendAsync({\n            from: account,\n            id: time,\n            jsonrpc: \"2.0\",\n            method: 'eth_signTypedData_v4',\n            params: [account, dataToSign]\n        }, (error, result) => {\n            if (error) {\n                console.error(error);\n                resolve(false);\n            } else if (result.error) {\n                console.error(result.error.message);\n                resolve(false);\n            } else {\n                console.log(\"Signature: \" + result.result);\n                resolve(result.result);\n            }\n        });\n    });\n}\n\n\nexport function doPersonalSignTypedData(dataToSign, account, web3) {\n    return new Promise(resolve => {\n        web3.currentProvider.sendAsync({\n            from: account,\n            method: 'personal_sign',\n            params: [web3.utils.toHex(dataToSign), account]\n        }, (error, result) => {\n            if (error) {\n                console.error(error);\n                resolve(false);\n            } else if (result.error) {\n                console.error(result.error.message);\n                resolve(false);\n            } else {\n                console.log(\"Signature: \" + result.result);\n                resolve(result.result);\n            }\n        });\n    });\n}"],"sourceRoot":""}